install.packages('tinytex')
tinytex::install_tinytex()
shapiro.test(datos$lcaval)
```{r}
datos = read.table(file = "prostate.txt")
summary(datos)
summary(datos)
shapiro.test(datos$age)
head(datos)
shapiro.test(datos$lcaval)
shapiro.test(datos$lcaval)
shapiro.test(datos$lweigth)
for (i in 1:9){
print(shapiro.test(datos[[i]]]))
for (i in 1:9){
print(shapiro.test(datos[i]))
}
shapiro.test(datos$lcaval)
shapiro.test(datos$lcavol)
shapiro.test(datos$lweigth)
boxplot(datos) # No recomendado
boxplot(datos) # No recomendado
boxplot(datos) # No recomendado
boxplot(datos) # No recomendado
boxplot(datos) # No recomendado
boxplot(datos) # No recomendado
boxplot(datos) # No recomendado
boxplot(datos) # No recomendado
boxplot(datos) # No recomendado
datos = read.table(file = "prostate.txt")
#Lo importa por csv
summary(datos)
str(datos)  #Otra forma para ver el contenido de los datos
head(datos)
boxplot(datos) # No recomendado
boxplot(datos$lpsa) # Mejor el $ que los corchetes
round(cor(datos),2)   # Para ver mejor el máximo. ¿Método que calcule el max?
for (i in 1:9){
print(nombres[i])
print(shapiro.test(datos[i]))
}
nombres = colnames(datos)
for (i in 1:9){
print(nombres[i])
print(shapiro.test(datos[i]))
}
nombres = colnames(datos)
for (i in 1:9){
print(nombres[i])
print(shapiro.test(datos[[i]]))
}
nombres = colnames(datos)
for (i in 1:9){
print(nombres[i])
tsw = shapiro.test(datos[[i]]))
nombres = colnames(datos)
for (i in 1:9){
print(nombres[i])
tsw = shapiro.test(datos[[i]])
}
nombres = colnames(datos)
for (i in 1:9){
print(nombres[i])
tsw = shapiro.test(datos[[i]])
print(tsw$p.value)  # Mejor que imprimir todo, imprimimos lo que nos interesa (el p-valor)
}
nombres = colnames(datos)
for (i in 1:9){
tsw = shapiro.test(datos[[i]])
if (tsw$p.value < 0.05) {
print(nombres[i])
print(tsw$p.value)  # Mejor que imprimir todo, imprimimos lo que nos interesa (el p-valor)
}
}
lapply(datos, shapiro.test)  # Ha hecho el for por mí
# Realización de la x_media:
set.seed(27)
y=rbinom(5000000, size=100, prob=0.7)/100
(hist(y))
mean(y)
var(y)
mean(y)
var(y)
set.seed(2023)
t=50000
fuera=rep(0,t)
for (i in 1:t){
x=rchisq(5,df=15)
fuera[i]=(abs(mean(x)-15)>= 1.5)
}
cat(mean(fuera))
str(datos)
attach(datos)
sessionInfo()
if (! requireNamespace (" BiocManager ", quietly = TRUE ))
install . packages (" BiocManager ")
if (! requireNamespace (" BiocManager ", quietly = TRUE )) install . packages (" BiocManager ")
if (! requireNamespace (" BiocManager ", quietly = TRUE )) install.packages (" BiocManager ")
if (! requireNamespace (" BiocManager ", quietly = TRUE ))
install . packages (" BiocManager ")
if (! requireNamespace (" BiocManager ", quietly = TRUE ))
install.packages (" BiocManager ")
BiocManager::install (" GDCRNATools ")
install.packages("BiocManager")
BiocManager::install("GDCRNATools")
source("~/Archivos_R/scripts/analisis_supervivencia.R", echo=TRUE)
clinical_df <- clinical_df[,unlist(lista_var_definitiva)]
colnames(clinical_df)
lista_var_definitiva
lista_negra
pares
gdcFilterSampleType(metaMatrix.MIR)
gdcFilterDuplicate(metaMatrix.MIR)
# Define the function to merge all isoform quantification files into one df
merge_MIR <- function(metadata, fdir){
filelist <- list.files(fdir, pattern="*.txt$",
recursive = TRUE, full.names=TRUE)
for (i in 1:length(filelist)){
iname <- basename(filelist[i])
isamplename <- metadata[metadata$file_name==iname, "sample"]
if(length(isamplename) == 0)
next
idf <- read.csv(filelist[i], sep="\t", header=TRUE)
idf <- idf %>% filter(startsWith(idf$miRNA_region,"mature"), idf$cross.mapped == "N")
subset_idf <- idf[, c("miRNA_ID", "reads_per_million_miRNA_mapped")]
subset_idf <- subset_idf %>% group_by(miRNA_ID) %>% summarise(conteo_normalizado = sum(reads_per_million_miRNA_mapped, na.rm = TRUE))
names(subset_idf)[2] <- isamplename
if (i==1){
combined_df <- subset_idf
rm(subset_idf)
} else {
combined_df <- merge(combined_df, subset_idf, by='miRNA_ID', all=TRUE)
rm(subset_idf)
}
}
rownames(combined_df) <- combined_df$miRNA_ID
combined_df <- combined_df[,-which(names(combined_df) %in% "miRNA_ID")]
return(combined_df)
}
MIRCounts <- merge_MIR(metaMatrix.MIR, isoform_miRNAs_dir)
# Define the function to merge all isoform quantification files into one df
merge_MIR <- function(metadata, fdir){
filelist <- list.files(fdir, pattern="*.txt$",
recursive = TRUE, full.names=TRUE)
for (i in 1:length(filelist)){
iname <- basename(filelist[i])
isamplename <- metadata[metadata$file_name==iname, "sample"]
if(length(isamplename) == 0)
next
idf <- read.csv(filelist[i], sep="\t", header=TRUE)
print(idf)
idf <- idf %>% filter(startsWith(idf$miRNA_region,"mature"), idf$cross.mapped == "N")
subset_idf <- idf[, c("miRNA_ID", "reads_per_million_miRNA_mapped")]
subset_idf <- subset_idf %>% group_by(miRNA_ID) %>% summarise(conteo_normalizado = sum(reads_per_million_miRNA_mapped, na.rm = TRUE))
print(subset_idf)
names(subset_idf)[2] <- isamplename
if (i==1){
combined_df <- subset_idf
rm(subset_idf)
} else {
combined_df <- merge(combined_df, subset_idf, by='miRNA_ID', all=TRUE)
rm(subset_idf)
}
}
rownames(combined_df) <- combined_df$miRNA_ID
combined_df <- combined_df[,-which(names(combined_df) %in% "miRNA_ID")]
return(combined_df)
}
MIRCounts <- merge_MIR(metaMatrix.MIR, isoform_miRNAs_dir)
metaMatrix.MIR
# Define the function to merge all isoform quantification files into one df
merge_MIR <- function(metadata, fdir){
filelist <- list.files(fdir, pattern="*.txt$",
recursive = TRUE, full.names=TRUE)
for (i in 1:length(filelist)){
iname <- basename(filelist[i])
isamplename <- metadata[metadata$file_name==iname, "sample"]
if(length(isamplename) == 0)
next
idf <- read.csv(filelist[i], sep="\t", header=TRUE)
print(idf)
idf <- idf %>% filter(startsWith(idf$miRNA_region,"mature"), idf$cross.mapped == "N")
subset_idf <- idf[, c("miRNA_ID", "reads_per_million_miRNA_mapped")]
subset_idf <- subset_idf %>% group_by(miRNA_ID) %>% summarise(conteo_normalizado = sum(reads_per_million_miRNA_mapped, na.rm = TRUE))
print(subset_idf, n = 600)
names(subset_idf)[2] <- isamplename
if (i==1){
combined_df <- subset_idf
rm(subset_idf)
} else {
combined_df <- merge(combined_df, subset_idf, by='miRNA_ID', all=TRUE)
rm(subset_idf)
}
}
rownames(combined_df) <- combined_df$miRNA_ID
combined_df <- combined_df[,-which(names(combined_df) %in% "miRNA_ID")]
return(combined_df)
}
MIRCounts <- merge_MIR(metaMatrix.MIR, isoform_miRNAs_dir)
# Define the function to merge all isoform quantification files into one df
merge_MIR <- function(metadata, fdir){
filelist <- list.files(fdir, pattern="*.txt$",
recursive = TRUE, full.names=TRUE)
for (i in 1:length(filelist)){
iname <- basename(filelist[i])
isamplename <- metadata[metadata$file_name==iname, "sample"]
if(length(isamplename) == 0)
next
idf <- read.csv(filelist[i], sep="\t", header=TRUE)
print(idf)
idf <- idf %>% filter(startsWith(idf$miRNA_region,"mature"), idf$cross.mapped == "N")
subset_idf <- idf[, c("miRNA_ID", "reads_per_million_miRNA_mapped")]
subset_idf <- subset_idf %>% group_by(miRNA_ID) %>% summarise(conteo_normalizado = sum(reads_per_million_miRNA_mapped, na.rm = TRUE))
print(subset_idf)
print(sum(subset_idf))
names(subset_idf)[2] <- isamplename
if (i==1){
combined_df <- subset_idf
rm(subset_idf)
} else {
combined_df <- merge(combined_df, subset_idf, by='miRNA_ID', all=TRUE)
rm(subset_idf)
}
}
rownames(combined_df) <- combined_df$miRNA_ID
combined_df <- combined_df[,-which(names(combined_df) %in% "miRNA_ID")]
return(combined_df)
}
MIRCounts <- merge_MIR(metaMatrix.MIR, isoform_miRNAs_dir)
# Define the function to merge all isoform quantification files into one df
merge_MIR <- function(metadata, fdir){
filelist <- list.files(fdir, pattern="*.txt$",
recursive = TRUE, full.names=TRUE)
for (i in 1:length(filelist)){
iname <- basename(filelist[i])
isamplename <- metadata[metadata$file_name==iname, "sample"]
if(length(isamplename) == 0)
next
idf <- read.csv(filelist[i], sep="\t", header=TRUE)
print(idf)
idf <- idf %>% filter(startsWith(idf$miRNA_region,"mature"), idf$cross.mapped == "N")
subset_idf <- idf[, c("miRNA_ID", "reads_per_million_miRNA_mapped")]
subset_idf <- subset_idf %>% group_by(miRNA_ID) %>% summarise(conteo_normalizado = sum(reads_per_million_miRNA_mapped, na.rm = TRUE))
print(subset_idf)
print(sum(subset_idf$conteo_normalizado))
names(subset_idf)[2] <- isamplename
if (i==1){
combined_df <- subset_idf
rm(subset_idf)
} else {
combined_df <- merge(combined_df, subset_idf, by='miRNA_ID', all=TRUE)
rm(subset_idf)
}
}
rownames(combined_df) <- combined_df$miRNA_ID
combined_df <- combined_df[,-which(names(combined_df) %in% "miRNA_ID")]
return(combined_df)
}
MIRCounts <- merge_MIR(metaMatrix.MIR, isoform_miRNAs_dir)
head(MIRCounts)
# Pequeño análisis del conjunto de datos:
MIRCounts[1:5,1:20]
